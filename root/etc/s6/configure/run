#!/bin/bash

function waitForLock() {
	craft=$1
	session=$(curl -X PUT -d '{"Name": "sync"}' http://localhost:8500/v1/session/create)
	session_id=$(echo $session | jq --raw-output ".ID")

	got_lock="false"

	while [ "$got_lock" == "false" ]
	do
		sleep 3
		got_lock=$(curl -X PUT -d '[restarting]' http://localhost:8500/v1/kv/sync/$craft?aquire=$session_id)
	done
}

function killSession() {
	craft=$1
	session_id=$2
	curl -X PUT http://localhost:8500/v1/kv/sync/$craft?release=$session_id
}

waitForLock configure

doRestart="FALSE"

function enqueRestart() {
	doRestart="TRUE"
}

function goRestart() {
	if [ "$doRestart" == "TRUE" ]
	then
		consul event -name "sync:restart" -service syncthing $VOL
	fi
}

echo "Waiting for syncthing to come online"
s6-svwait /etc/s6/syncthing

check=7

while [ $check -ne 0 ]
do
	curl -s -o /dev/null 127.0.0.1:8080
	check=$?
	sleep 3
done

echo "Setting default options"
syncthing-cli options set globalannenabled true
if [ "$ALLOW_GLOBAL" == "false" ]
then
	syncthing-cli options set globalannserver sdiscovery.service.consul:22026
	syncthing-cli options set upnp false
fi
syncthing-cli options set reporting false

# get information about this node
id=$(syncthing-cli id)
currentIp=`ip route get 8.8.8.8 | awk 'NR==1 {print $NF}'`

# find other nodes
peers_string=$(dig @127.0.0.1 -p 8600 syncthing.service.local.consul +short)
peers=($peers_string)
ids=($(curl http://127.0.0.1:8500/v1/kv/sync/device?recurse | jq --raw-output '.[] | .Key | match("sync/device/(.*)") | .captures[].string'))

curl -X PUT -d "" http://127.0.0.1:8500/v1/kv/sync/device/$id

# configure default volume for any
if [ "$VOL" == "all" ]
then
	export VOL="default"
fi

if [ -f /data/synced ]
then
	$old_share = $(cat /data/synced)
	if [ "$old_share" == "$VOL" ]
	then
		echo "Not reconfiguring an already configured device"
		exit 0
	fi

	echo "Reconfiguring for a new volume"

	for peer in "$peers[@]"
	do
		echo "Removing self from $peer"
		syncthing-cli -e "http://$peer:8080" folders devices remove $VOL $id
		syncthing-cli -e "http://$peer:8080" devices remove $VOL $id
		enqueRestart
	done

	for peer in "${ids[@]}"
	do
		echo "Removing peer: $peer"
		syncthing-cli folders devices remove $VOL $peer
		syncthing-cli devices remove $peer
	done

	syncthing-cli folders remove $VOL
	enqueRestart
	sleep 10
fi

# don't try to reconfigure
echo "$VOL" > /data/synced

# set volume sync
syncthing-cli folders remove default
mkdir $VOL_LOCATION
syncthing-cli folders add $VOL $VOL_LOCATION
syncthing-cli folders set $VOL rescan 86400

echo

# configure this node with all its peers
for peer in "${ids[@]}"
do
	echo "Adding $peer"
	syncthing-cli devices add $peer
	syncthing-cli folders devices add $VOL $peer
done

enqueRestart

for peer in "${peers[@]}"
do
	echo "Adding self to $peer"
	syncthing-cli -e "http://$peer:8080" devices add $id
	syncthing-cli -e "http://$peer:8080" folders devices add $VOL $id
	enqueRestart
done

echo "device added to pool, sending restart command"
goRestart
killSession configure $session_id